circuit LFSR16 : @[:@2.0]
  module LFSR16 : @[:@3.2]
    input clock : Clock @[:@4.4]
    input reset : UInt<1> @[:@5.4]
    input io_inc : UInt<1> @[:@6.4]
    output io_out : UInt<16> @[:@6.4]
  
    reg res : UInt<16>, clock with :
      reset => (UInt<1>("h0"), res) @[LFSR16.scala 19:20:@8.4]
    node _T_11 = bits(res, 0, 0) @[LFSR16.scala 21:26:@10.6]
    node _T_12 = bits(res, 2, 2) @[LFSR16.scala 21:33:@11.6]
    node _T_13 = xor(_T_11, _T_12) @[LFSR16.scala 21:29:@12.6]
    node _T_14 = bits(res, 3, 3) @[LFSR16.scala 21:40:@13.6]
    node _T_15 = xor(_T_13, _T_14) @[LFSR16.scala 21:36:@14.6]
    node _T_16 = bits(res, 5, 5) @[LFSR16.scala 21:47:@15.6]
    node _T_17 = xor(_T_15, _T_16) @[LFSR16.scala 21:43:@16.6]
    node _T_18 = bits(res, 15, 1) @[LFSR16.scala 21:55:@17.6]
    node _T_19 = cat(_T_17, _T_18) @[Cat.scala 30:58:@18.6]
    node _GEN_0 = mux(io_inc, _T_19, res) @[LFSR16.scala 20:17:@9.4]
    io_out <= res @[LFSR16.scala 24:10:@21.4]
    res <= mux(reset, UInt<16>("h1"), _GEN_0) @[LFSR16.scala 22:9:@19.6]
