circuit GCD : @[:@2.0]
  module GCD : @[:@3.2]
    input clock : Clock @[:@4.4]
    input reset : UInt<1> @[:@5.4]
    input io_a : UInt<16> @[:@6.4]
    input io_b : UInt<16> @[:@6.4]
    input io_load : UInt<1> @[:@6.4]
    output io_out : UInt<16> @[:@6.4]
    output io_valid : UInt<1> @[:@6.4]
  
    reg x : UInt<16>, clock with :
      reset => (UInt<1>("h0"), x) @[GCD.scala 20:14:@8.4]
    reg y : UInt<16>, clock with :
      reset => (UInt<1>("h0"), y) @[GCD.scala 21:14:@9.4]
    node _T_17 = gt(x, y) @[GCD.scala 26:13:@15.6]
    node _T_18 = sub(x, y) @[GCD.scala 27:14:@17.8]
    node _T_19 = asUInt(_T_18) @[GCD.scala 27:14:@18.8]
    node _T_20 = tail(_T_19, 1) @[GCD.scala 27:14:@19.8]
    node _T_21 = leq(x, y) @[GCD.scala 28:20:@23.8]
    node _T_22 = sub(y, x) @[GCD.scala 29:14:@25.10]
    node _T_23 = asUInt(_T_22) @[GCD.scala 29:14:@26.10]
    node _T_24 = tail(_T_23, 1) @[GCD.scala 29:14:@27.10]
    node _GEN_0 = mux(_T_21, _T_24, y) @[GCD.scala 28:26:@24.8]
    node _GEN_1 = mux(_T_17, _T_20, x) @[GCD.scala 26:18:@16.6]
    node _GEN_2 = mux(_T_17, y, _GEN_0) @[GCD.scala 26:18:@16.6]
    node _GEN_3 = mux(io_load, io_a, _GEN_1) @[GCD.scala 23:18:@10.4]
    node _GEN_4 = mux(io_load, io_b, _GEN_2) @[GCD.scala 23:18:@10.4]
    node _T_26 = eq(y, UInt<1>("h0")) @[GCD.scala 34:17:@32.4]
    io_out <= x @[GCD.scala 33:10:@31.4]
    io_valid <= _T_26 @[GCD.scala 34:12:@33.4]
    x <= _GEN_3 @[GCD.scala 24:7:@11.6 GCD.scala 27:9:@20.8]
    y <= _GEN_4 @[GCD.scala 24:18:@12.6 GCD.scala 29:9:@28.10]
