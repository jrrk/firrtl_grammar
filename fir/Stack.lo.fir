circuit Stack : @[:@2.0]
  module Stack : @[:@3.2]
    input clock : Clock @[:@4.4]
    input reset : UInt<1> @[:@5.4]
    input io_push : UInt<1> @[:@6.4]
    input io_pop : UInt<1> @[:@6.4]
    input io_en : UInt<1> @[:@6.4]
    input io_dataIn : UInt<32> @[:@6.4]
    output io_dataOut : UInt<32> @[:@6.4]
  
    mem stack_mem : @[Stack.scala 16:22:@8.4]
      data-type => UInt<32>
      depth => 8
      read-latency => 0
      write-latency => 1
      reader => _T_43
      writer => _T_25
      read-under-write => undefined
    reg sp : UInt<4>, clock with :
      reset => (UInt<1>("h0"), sp) @[Stack.scala 17:26:@9.4]
    reg out : UInt<32>, clock with :
      reset => (UInt<1>("h0"), out) @[Stack.scala 18:26:@10.4]
    node _T_22 = lt(sp, UInt<4>("h8")) @[Stack.scala 21:25:@12.6]
    node _T_23 = and(io_push, _T_22) @[Stack.scala 21:18:@13.6]
    node _T_24 = bits(sp, 2, 0) @[Stack.scala 22:16:@15.8]
    node _T_27 = add(sp, UInt<1>("h1")) @[Stack.scala 23:16:@18.8]
    node _T_28 = tail(_T_27, 1) @[Stack.scala 23:16:@19.8]
    node _T_30 = gt(sp, UInt<1>("h0")) @[Stack.scala 24:31:@23.8]
    node _T_31 = and(io_pop, _T_30) @[Stack.scala 24:24:@24.8]
    node _T_33 = sub(sp, UInt<1>("h1")) @[Stack.scala 25:16:@26.10]
    node _T_34 = asUInt(_T_33) @[Stack.scala 25:16:@27.10]
    node _T_35 = tail(_T_34, 1) @[Stack.scala 25:16:@28.10]
    node _GEN_0 = mux(_T_31, _T_35, sp) @[Stack.scala 24:39:@25.8]
    node _GEN_1 = validif(_T_23, _T_24) @[Stack.scala 21:42:@14.6]
    node _GEN_2 = validif(_T_23, clock) @[Stack.scala 21:42:@14.6]
    node _GEN_3 = mux(_T_23, UInt<1>("h1"), UInt<1>("h0")) @[Stack.scala 21:42:@14.6]
    node _GEN_4 = validif(_T_23, UInt<1>("h1")) @[Stack.scala 21:42:@14.6]
    node _GEN_5 = validif(_T_23, io_dataIn) @[Stack.scala 21:42:@14.6]
    node _GEN_6 = mux(_T_23, _T_28, _GEN_0) @[Stack.scala 21:42:@14.6]
    node _T_37 = gt(sp, UInt<1>("h0")) @[Stack.scala 27:14:@31.6]
    node _T_39 = sub(sp, UInt<1>("h1")) @[Stack.scala 28:27:@33.8]
    node _T_40 = asUInt(_T_39) @[Stack.scala 28:27:@34.8]
    node _T_41 = tail(_T_40, 1) @[Stack.scala 28:27:@35.8]
    node _T_42 = bits(_T_41, 2, 0) @[Stack.scala 28:23:@36.8]
    node _GEN_7 = validif(_T_37, _T_42) @[Stack.scala 27:21:@32.6]
    node _GEN_8 = validif(_T_37, clock) @[Stack.scala 27:21:@32.6]
    node _GEN_9 = mux(_T_37, UInt<1>("h1"), UInt<1>("h0")) @[Stack.scala 27:21:@32.6]
    node _GEN_10 = mux(_T_37, stack_mem._T_43.data, out) @[Stack.scala 27:21:@32.6]
    node _GEN_11 = validif(io_en, _GEN_1) @[Stack.scala 20:16:@11.4]
    node _GEN_12 = validif(io_en, _GEN_2) @[Stack.scala 20:16:@11.4]
    node _GEN_13 = mux(io_en, _GEN_3, UInt<1>("h0")) @[Stack.scala 20:16:@11.4]
    node _GEN_14 = validif(io_en, _GEN_4) @[Stack.scala 20:16:@11.4]
    node _GEN_15 = validif(io_en, _GEN_5) @[Stack.scala 20:16:@11.4]
    node _GEN_16 = mux(io_en, _GEN_6, sp) @[Stack.scala 20:16:@11.4]
    node _GEN_17 = validif(io_en, _GEN_7) @[Stack.scala 20:16:@11.4]
    node _GEN_18 = validif(io_en, _GEN_8) @[Stack.scala 20:16:@11.4]
    node _GEN_19 = mux(io_en, _GEN_9, UInt<1>("h0")) @[Stack.scala 20:16:@11.4]
    node _GEN_20 = mux(io_en, _GEN_10, out) @[Stack.scala 20:16:@11.4]
    io_dataOut <= out @[Stack.scala 32:14:@41.4]
    stack_mem._T_43.addr <= _GEN_17 @[Stack.scala 28:23:@37.8]
    stack_mem._T_43.en <= _GEN_19 @[Stack.scala 16:22:@8.4 Stack.scala 28:23:@37.8]
    stack_mem._T_43.clk <= _GEN_18 @[Stack.scala 28:23:@37.8]
    stack_mem._T_25.addr <= _GEN_11 @[Stack.scala 22:16:@16.8]
    stack_mem._T_25.en <= _GEN_13 @[Stack.scala 16:22:@8.4 Stack.scala 22:16:@16.8]
    stack_mem._T_25.clk <= _GEN_12 @[Stack.scala 22:16:@16.8]
    stack_mem._T_25.data <= _GEN_15 @[Stack.scala 22:21:@17.8]
    stack_mem._T_25.mask <= _GEN_14 @[Stack.scala 22:16:@16.8 Stack.scala 22:21:@17.8]
    sp <= mux(reset, UInt<4>("h0"), _GEN_16) @[Stack.scala 23:10:@20.8 Stack.scala 25:10:@29.10]
    out <= mux(reset, UInt<32>("h0"), _GEN_20) @[Stack.scala 28:11:@38.8]
