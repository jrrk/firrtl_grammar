circuit SimpleALU : @[:@2.0]
  module SimpleALU : @[:@3.2]
    input clock : Clock @[:@4.4]
    input reset : UInt<1> @[:@5.4]
    input io_a : UInt<4> @[:@6.4]
    input io_b : UInt<4> @[:@6.4]
    input io_opcode : UInt<2> @[:@6.4]
    output io_out : UInt<4> @[:@6.4]
  
    node _T_15 = eq(io_opcode, UInt<1>("h0")) @[SimpleALU.scala 45:19:@9.4]
    node _T_16 = add(io_a, io_b) @[SimpleALU.scala 46:20:@11.6]
    node _T_17 = tail(_T_16, 1) @[SimpleALU.scala 46:20:@12.6]
    node _T_19 = eq(io_opcode, UInt<1>("h1")) @[SimpleALU.scala 47:26:@16.6]
    node _T_20 = sub(io_a, io_b) @[SimpleALU.scala 48:20:@18.8]
    node _T_21 = asUInt(_T_20) @[SimpleALU.scala 48:20:@19.8]
    node _T_22 = tail(_T_21, 1) @[SimpleALU.scala 48:20:@20.8]
    node _T_24 = eq(io_opcode, UInt<2>("h2")) @[SimpleALU.scala 49:26:@24.8]
    node _GEN_0 = mux(_T_24, io_a, io_b) @[SimpleALU.scala 49:35:@25.8]
    node _GEN_1 = mux(_T_19, _T_22, _GEN_0) @[SimpleALU.scala 47:35:@17.6]
    node _GEN_2 = mux(_T_15, _T_17, _GEN_1) @[SimpleALU.scala 45:28:@10.4]
    io_out <= _GEN_2 @[SimpleALU.scala 44:10:@8.4 SimpleALU.scala 46:12:@13.6 SimpleALU.scala 48:12:@21.8 SimpleALU.scala 50:12:@26.10 SimpleALU.scala 52:12:@29.10]
